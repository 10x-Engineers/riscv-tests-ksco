
# See LICENSE for license details.

# This file is automatically generated. Do not edit.

#*****************************************************************************
# vlse32_v_LMUL1VL4STRIDE0.S
#-----------------------------------------------------------------------------
#
# Test vlse32.v instructions.
# With LMUL=1, VL=4, STRIDE=0
#

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64UV

RVTEST_CODE_BEGIN


  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle32.v v1, (a2)

  
  li t0, 4
  vsetvli t1, t0, e32,m1,ta,ma
  li t0, 0
  vlse32.v v1, (s1), t0

  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a1, res
  vse32.v v1, (a1)
  TEST_CASE(2, t0, 0x4003b0f04003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(3, t0, 0x4003b0f04003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(4, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(5, t0, 0xbf8003044003b0f0, ld t0, 0(a1); addi a1, a1, 8)



  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle32.v v1, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 4
  vsetvli t1, t0, e32,m1,ta,ma
  li t0, 0
  vlse32.v v1, (s1), t0, v0.t

  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a1, res
  vse32.v v1, (a1)

  TEST_CASE(6, t0, 0x404000004003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(7, t0, 0xdeadbeef4003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(8, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(9, t0, 0xbf8003044003b0f0, ld t0, 0(a1); addi a1, a1, 8)



  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle32.v v1, (a2)

  
  li t0, 4
  vsetvli t1, t0, e32,m1,tu,ma
  li t0, 0
  vlse32.v v1, (s1), t0

  li t0, -1
  vsetvli t1, t0, e32,m1,tu,ma
  la a1, res
  vse32.v v1, (a1)

  TEST_CASE(10, t0, 0x4003b0f04003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(11, t0, 0x4003b0f04003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(12, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(13, t0, 0xbf8003044003b0f0, ld t0, 0(a1); addi a1, a1, 8)



  li t0, -1
  vsetvli t1, t0, e32,m1,ta,ma
  la a2, tdat
  mv s1, a2
  addi a2, a2, 8
  vle32.v v1, (a2)

  
  li t0, -1
  vsetvli t1, t0, e8,m1,ta,ma
  la a3, mask
  vle8.v v0, (a3)

  li t0, 4
  vsetvli t1, t0, e32,m1,ta,mu
  li t0, 0
  vlse32.v v1, (s1), t0, v0.t

  li t0, -1
  vsetvli t1, t0, e32,m1,ta,mu
  la a1, res
  vse32.v v1, (a1)

  TEST_CASE(14, t0, 0x404000004003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(15, t0, 0xdeadbeef4003b0f0, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(16, t0, 0xabad1dea1337d00d, ld t0, 0(a1); addi a1, a1, 8)
  TEST_CASE(17, t0, 0xbf8003044003b0f0, ld t0, 0(a1); addi a1, a1, 8)



  TEST_PASSFAIL

RVTEST_CODE_END

  .data
RVTEST_DATA_BEGIN

res:
  .zero 40

tdat:
  .quad 0xbf8003044003b0f0
  .quad 0x40400000c0800000
  .quad 0xdeadbeefcafebabe
  .quad 0xabad1dea1337d00d
  .quad 0xbf8003044003b0f0

mask:
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555
  .quad 0x5555555555555555

RVTEST_DATA_END
